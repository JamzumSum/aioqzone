# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, aioqzone
# This file is distributed under the same license as the aioqzone package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: aioqzone\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-23 21:57+0800\n"
"PO-Revision-Date: 2023-02-23 22:09+0800\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: zh\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"X-Generator: Poedit 3.2.2\n"

#: ../../source/qqqr/event/hook.rst:2
msgid "Event and Hooks"
msgstr "事件与回调"

#: ../../source/qqqr/event/hook.rst:4
msgid ""
"aioqzone has designed a simple hook management system. You may extend your own event, or just "
"inherit a event and implement your hooks."
msgstr ""
"aioqzone 已经设计了一个简单的事件-回调系统。你可以扩展你自己的事件，或者只是继承一个事件，在其中实现"
"你自己的回调逻辑。"

#: of qqqr.event:1
msgid "QQQR event system."
msgstr "QQQR 事件系统"

#: of qqqr.event.Event:1
msgid "Base class for event system."
msgstr "事件系统的基类。"

#: of qqqr.event.EventManager:1
msgid "EventManager is a convenient way to create/trace/manage friend classes."
msgstr "EventManager 提供了便捷的 创建/跟踪/管理友元类的方式。"

#: of qqqr.event.EventManager.inst_of:1
msgid ""
"A helper function that initiate a hook with given args. :rtype: :py:class:`~typing."
"TypeVar`\\(``Evt``, bound= :py:class:`~qqqr.event.Event`)"
msgstr ""

#: of qqqr.event.EventManager.type_of:1
msgid ""
"Get current hook class by the given type. :rtype: :py:class:`~typing.Type`\\[:py:class:`~typing."
"TypeVar`\\(``Evt``, bound= :py:class:`~qqqr.event.Event`)]"
msgstr ""

#: of qqqr.event.NullEvent:1
msgid "For debugging"
msgstr "用于调试"

#: of qqqr.event.Tasksets:1
msgid "An object has some event to trigger."
msgstr ""

#: of qqqr.event.Tasksets.add_hook_ref:1
msgid "Add an awaitable into the given taskset."
msgstr "向指定的集合中添加一个任务。"

#: of qqqr.event.Tasksets.add_hook_ref qqqr.event.Tasksets.clear qqqr.event.Tasksets.wait
msgid "参数"
msgstr ""

#: of qqqr.event.Tasksets.add_hook_ref:4
msgid "taskset key"
msgstr ""

#: of qqqr.event.Tasksets.add_hook_ref:6
msgid "the awaitable (`Coroutine`, `Generator` and `~asyncio.Task` supported)"
msgstr ""

#: of qqqr.event.Tasksets.clear:1
msgid "Clear the given task sets."
msgstr "清空指定集合"

#: of qqqr.event.Tasksets.clear:4
msgid "task class names. **If not given, all tasks will be cleared.**"
msgstr ""

#: of qqqr.event.Tasksets.clear:6
msgid "Cancel the task if a set is not empty, defaults to True. Else will just clear the ref."
msgstr ""

#: of qqqr.event.Tasksets.wait:1
msgid "Wait for all task in the specific task set(s)."
msgstr ""

#: of qqqr.event.Tasksets.wait:4
msgid "timeout, defaults to None"
msgstr ""

#: of qqqr.event.Tasksets.wait qqqr.event.hook_guard
msgid "返回类型"
msgstr ""

#: of qqqr.event.Tasksets.wait:6
msgid ""
":py:data:`~typing.Tuple`\\[:py:class:`~typing.Set`\\[:py:class:`~_asyncio.Task`], :py:class:"
"`~typing.Set`\\[:py:class:`~_asyncio.Task`]]"
msgstr ""

#: of qqqr.event.Tasksets.wait
msgid "返回"
msgstr ""

#: of qqqr.event.Tasksets.wait:7
msgid "done, pending"
msgstr ""

#: of qqqr.event.Tasksets.wait:10
msgid ""
"If `timeout` is None, this method will loop until all tasks in the set(s) are done. That means if "
"other tasks are added during awaiting, the added task will be waited as well."
msgstr ""

#: of qqqr.event.Tasksets.wait:13
msgid ":meth:`asyncio.wait`"
msgstr ""

#: of qqqr.event.hook_guard:1
msgid "This can be used as a decorator to ensure a hook can only raise :exc:`HookError`."
msgstr ""

#: of qqqr.event.hook_guard:3
msgid "..note:: If the hook is already wrapped, it will be returned as is."
msgstr ""

#: of qqqr.event.hook_guard:6
msgid ""
":py:data:`~typing.Callable`\\[\\[:py:class:`~typing.ParamSpec`\\(``P``)], :py:class:`~typing."
"Coroutine`\\[:py:data:`~typing.Any`, :py:data:`~typing.Any`, :py:class:`~typing.TypeVar`\\(``T``)]]"
msgstr ""

#: of qqqr.event.sub_of:1
msgid "Add a hook class scope."
msgstr ""

#: of qqqr.event.sub_of:3
msgid "Example"
msgstr ""
