# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, aioqzone
# This file is distributed under the same license as the aioqzone package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: aioqzone \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-23 21:04+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../source/qqqr/event/login.rst:2
msgid "Login Events"
msgstr ""

#: aioqzone.event.login.LoginMethod:1 of
msgid "An enumeration."
msgstr ""

#: aioqzone.event.login.LoginEvent:1 of
msgid "Defines usual events happens during login."
msgstr ""

#: aioqzone.event.login.LoginEvent.LoginFailed:1 of
msgid "Will be emitted on login failed."
msgstr ""

#: aioqzone.event.login.LoginEvent.LoginFailed aioqzone.event.login.LoginEvent.LoginSuccess of
msgid "参数"
msgstr ""

#: aioqzone.event.login.LoginEvent.LoginFailed:4 aioqzone.event.login.LoginEvent.LoginSuccess:4 of
msgid "indicate what login method this login attempt used"
msgstr ""

#: aioqzone.event.login.LoginEvent.LoginFailed:6 of
msgid "Err msg, defaults to None."
msgstr ""

#: aioqzone.event.login.LoginEvent.LoginSuccess:1 of
msgid "Will be emitted after login success."
msgstr ""

#: aioqzone.event.login.QREvent:1 of
msgid "Defines usual events happens during QR login."
msgstr ""

#: aioqzone.event.login.UPEvent:1 of
msgid "Defines usual events happens during password login."
msgstr ""

#~ msgid ""
#~ "Abstract class represents a login manager. It is"
#~ " a :class:`Emittable` class which can emit "
#~ ":class:`LoginEvent`."
#~ msgstr ""

#~ msgid "Subclasses *must* implement this method to return a cookie dict."
#~ msgstr ""

#~ msgid "返回类型"
#~ msgstr ""

#~ msgid ":py:class:`~typing.Dict`\\[:py:class:`str`, :py:class:`str`]"
#~ msgstr ""

#~ msgid "返回"
#~ msgstr ""

#~ msgid "cookie dict"
#~ msgstr ""

#~ msgid "Get a cookie dict using any method. Allows cached cookie."
#~ msgstr ""

#~ msgid "cookie. Cached cookie is preferable."
#~ msgstr ""

#~ msgid "Calculate ``gtk`` using ``pskey`` filed in the cookie."
#~ msgstr ""

#~ msgid ":py:class:`int`"
#~ msgstr ""

#~ msgid "gtk"
#~ msgstr ""

#~ msgid "``0`` denotes no existing login."
#~ msgstr ""

#~ msgid ":meth:`qqqr.utils.encrypt.gtk`"
#~ msgstr ""

#~ msgid "Last login time stamp. 0 represents no login since created."
#~ msgstr ""

#~ msgid ""
#~ "Get a new cookie dict, which means cached "
#~ "cookie is not allowed. Generally, this will trigger"
#~ " a login."
#~ msgstr ""

#~ msgid ""
#~ "This method uses :class:`asyncio.Lock` to ensure that "
#~ "only one request can trigger an actual login "
#~ "at the same time, other requests will block "
#~ "until the first is complete and share the "
#~ "cookie from this single login."
#~ msgstr ""

#~ msgid "cookie. Shouldn't be a cached one."
#~ msgstr ""
