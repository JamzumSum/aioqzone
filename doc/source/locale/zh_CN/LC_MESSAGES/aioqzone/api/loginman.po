# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, aioqzone
# This file is distributed under the same license as the aioqzone package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: aioqzone \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-24 20:48+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../source/aioqzone/api/loginman.rst:2
msgid "Login Managers"
msgstr "登录管理器"

#: aioqzone.api.loginman:1 of
msgid ""
"Collect some built-in login manager w/o caching. Users can inherit these managers and implement "
"their own caching logic."
msgstr ""

#: aioqzone.api.loginman._base.Loginable:1 of
msgid ""
"Abstract class represents a login manager. It is a :class:`Emittable` class which can emit "
":class:`LoginEvent`."
msgstr ""

#: aioqzone.api.loginman._base.Loginable._new_cookie:1 of
msgid "Subclasses *must* implement this method to return a cookie dict."
msgstr ""

#: aioqzone.api.loginman.MixedLoginMan._new_cookie aioqzone.api.loginman.MixedLoginMan.ordered_methods
#: aioqzone.api.loginman.QRLoginMan._new_cookie aioqzone.api.loginman.UPLoginMan._new_cookie
#: aioqzone.api.loginman._base.Loginable._new_cookie of
msgid "返回类型"
msgstr ""

#: aioqzone.api.loginman.MixedLoginMan._new_cookie:7 aioqzone.api.loginman.QRLoginMan._new_cookie:7
#: aioqzone.api.loginman.UPLoginMan._new_cookie:6 aioqzone.api.loginman._base.Loginable._new_cookie:4
#: of
msgid ":py:class:`~typing.Dict`\\[:py:class:`str`, :py:class:`str`]"
msgstr ""

#: aioqzone.api.loginman.Loginable.cookie aioqzone.api.loginman.Loginable.gtk
#: aioqzone.api.loginman.MixedLoginMan._new_cookie aioqzone.api.loginman.MixedLoginMan.ordered_methods
#: aioqzone.api.loginman.QRLoginMan._new_cookie aioqzone.api.loginman.UPLoginMan._new_cookie
#: aioqzone.api.loginman._base.Loginable._new_cookie aioqzone.api.loginman._base.Loginable.new_cookie
#: of
msgid "返回"
msgstr ""

#: aioqzone.api.loginman.MixedLoginMan._new_cookie:8 aioqzone.api.loginman.QRLoginMan._new_cookie:8
#: aioqzone.api.loginman.UPLoginMan._new_cookie:7 aioqzone.api.loginman._base.Loginable._new_cookie:5
#: of
msgid "cookie dict"
msgstr ""

#: aioqzone.api.loginman.Loginable.cookie:1 of
msgid "Get a cookie dict using any method. Allows cached cookie."
msgstr ""

#: aioqzone.api.loginman.Loginable.cookie:3 of
msgid "cookie. Cached cookie is preferable."
msgstr ""

#: aioqzone.api.loginman.Loginable.gtk:1 of
msgid "Calculate ``gtk`` using ``pskey`` filed in the cookie."
msgstr ""

#: aioqzone.api.loginman.Loginable.gtk:3 of
msgid "gtk"
msgstr ""

#: aioqzone.api.loginman.Loginable.gtk:5 of
msgid "``0`` denotes no existing login."
msgstr ""

#: aioqzone.api.loginman.Loginable.gtk:6 of
msgid ":meth:`qqqr.utils.encrypt.gtk`"
msgstr ""

#: ../../docstring aioqzone.api.loginman.Loginable.last_login:1 of
msgid "Last login time stamp. 0 represents no login since created."
msgstr ""

#: aioqzone.api.loginman._base.Loginable.new_cookie:1 of
msgid ""
"Get a new cookie dict, which means cached cookie is not allowed. Generally, this will trigger a "
"login."
msgstr ""

#: aioqzone.api.loginman._base.Loginable.new_cookie:4 of
msgid ""
"This method uses :class:`asyncio.Lock` to ensure that only one request can trigger an actual "
"login at the same time, other requests will block until the first is complete and share the "
"cookie from this single login."
msgstr ""

#: aioqzone.api.loginman._base.Loginable.new_cookie:8 of
msgid "cookie. Shouldn't be a cached one."
msgstr ""

#: aioqzone.api.loginman.MixedLoginMan:1 of
msgid "A login manager that will try methods according to the given :class:`.QrStrategy`."
msgstr ""

#: aioqzone.api.loginman.MixedLoginMan:5 of
msgid "Make it a :class:`EventManager`."
msgstr ""

#: aioqzone.api.loginman.MixedLoginMan._new_cookie aioqzone.api.loginman.QRLoginMan._new_cookie
#: aioqzone.api.loginman.UPLoginMan._new_cookie of
msgid "抛出"
msgstr ""

#: aioqzone.api.loginman.MixedLoginMan._new_cookie:2 of
msgid "if qr login is canceled and no succeeding method exist and success."
msgstr ""

#: aioqzone.api.loginman.MixedLoginMan._new_cookie:3 of
msgid "if all login methods are removed by subclasses."
msgstr ""

#: aioqzone.api.loginman.MixedLoginMan._new_cookie:4 of
msgid "if all login methods failed."
msgstr ""

#: aioqzone.api.loginman.MixedLoginMan._new_cookie:5 of
msgid "if unexcpected error occured in any login method. Succeeding method will not be used."
msgstr ""

#: aioqzone.api.loginman.MixedLoginMan.ordered_methods:1 of
msgid "Subclasses can inherit this method to choose a subset of `._order` according to its own policy."
msgstr ""

#: aioqzone.api.loginman.MixedLoginMan.ordered_methods:3 of
msgid ":py:class:`~typing.Sequence`\\[:py:class:`~aioqzone.event.login.LoginMethod`]"
msgstr ""

#: aioqzone.api.loginman.MixedLoginMan.ordered_methods:4 of
msgid "a subset of `._order`."
msgstr ""

#: aioqzone.api.loginman.QRLoginMan:1 of
msgid ""
"Login manager for QR login. This manager may trigger "
":meth:`~aioqzone.event.login.LoginEvent.LoginSuccess` and "
":meth:`~aioqzone.event.login.LoginEvent.LoginFailed` hook."
msgstr ""

#: aioqzone.api.loginman.QRLoginMan._new_cookie:2 of
msgid "qr polling task is canceled"
msgstr ""

#: aioqzone.api.loginman.QRLoginMan._new_cookie:3 of
msgid "on exceptions do not break the system, such as timeout, Http errors, etc."
msgstr ""

#: aioqzone.api.loginman.QRLoginMan._new_cookie:5 of
msgid "on unexpected error raised when polling"
msgstr ""

#: aioqzone.api.loginman.QRLoginMan._new_cookie of
msgid "raises"
msgstr ""

#: aioqzone.api.loginman.QRLoginMan._new_cookie:4 of
msgid "`qqqr.exception.HookError`: an error is raised from hook"
msgstr ""

#: aioqzone.api.loginman.UPLoginMan:1 of
msgid ""
"Login manager for username-password login. This manager may trigger "
":meth:`~aioqzone.event.login.LoginEvent.LoginSuccess` and "
":meth:`~aioqzone.event.login.LoginEvent.LoginFailed` hook."
msgstr ""

#: aioqzone.api.loginman.UPLoginMan._new_cookie:2 of
msgid "login error when up login."
msgstr ""

#: aioqzone.api.loginman.UPLoginMan._new_cookie:3 of
msgid "if acceptable errors occured, for example, http errors."
msgstr ""

#: aioqzone.api.loginman.UPLoginMan._new_cookie:4 of
msgid "if unexpected error raised"
msgstr ""

#: aioqzone.api.loginman._NextMethodInterrupt:1 of
msgid ""
"Internal exception represents the condition that the login method is interrupted and the caller "
"could choose the next login method or just to raise a :exc:`.LoginError`."
msgstr ""

#~ msgid "Raises"
#~ msgstr ""

#~ msgid "Return type"
#~ msgstr ""

#~ msgid "Returns"
#~ msgstr ""

#~ msgid ":py:class:`~typing.List`\\[:py:class:`~aioqzone.event.login.Loginable`]"
#~ msgstr ""

#~ msgid "Represents QR strategy."
#~ msgstr ""

#~ msgid ""
#~ "Collect some built-in login manager w/o caching."
#~ " Users can inherit these managers and implement "
#~ "their own caching logic."
#~ msgstr ""

#~ msgid ""
#~ "Abstract class represents a login manager. It is"
#~ " a :class:`Emittable` class which can emit "
#~ ":class:`LoginEvent`."
#~ msgstr ""

#~ msgid "Subclasses *must* implement this method to return a cookie dict."
#~ msgstr ""

#~ msgid "返回类型"
#~ msgstr ""

#~ msgid ":py:class:`~typing.Dict`\\[:py:class:`str`, :py:class:`str`]"
#~ msgstr ""

#~ msgid "返回"
#~ msgstr ""

#~ msgid "cookie dict"
#~ msgstr ""

#~ msgid "Get a cookie dict using any method. Allows cached cookie."
#~ msgstr ""

#~ msgid "cookie. Cached cookie is preferable."
#~ msgstr ""

#~ msgid "Calculate ``gtk`` using ``pskey`` filed in the cookie."
#~ msgstr ""

#~ msgid "gtk"
#~ msgstr ""

#~ msgid "``0`` denotes no existing login."
#~ msgstr ""

#~ msgid ":meth:`qqqr.utils.encrypt.gtk`"
#~ msgstr ""

#~ msgid "Last login time stamp. 0 represents no login since created."
#~ msgstr ""

#~ msgid ""
#~ "Get a new cookie dict, which means cached "
#~ "cookie is not allowed. Generally, this will trigger"
#~ " a login."
#~ msgstr ""

#~ msgid ""
#~ "This method uses :class:`asyncio.Lock` to ensure that "
#~ "only one request can trigger an actual login "
#~ "at the same time, other requests will block "
#~ "until the first is complete and share the "
#~ "cookie from this single login."
#~ msgstr ""

#~ msgid "cookie. Shouldn't be a cached one."
#~ msgstr ""

#~ msgid "A login manager that will try methods according to the given :class:`.QrStrategy`."
#~ msgstr ""

#~ msgid "Make it a :class:`EventManager`."
#~ msgstr ""

#~ msgid "抛出"
#~ msgstr ""

#~ msgid "if qr login is canceled and no succeeding method exist and success."
#~ msgstr ""

#~ msgid "if all login methods are removed by subclasses."
#~ msgstr ""

#~ msgid "if all login methods failed."
#~ msgstr ""

#~ msgid "if unexcpected error occured in any login method. Succeeding method will not be used."
#~ msgstr ""

#~ msgid ""
#~ "Subclasses can inherit this method to choose a "
#~ "subset of `._order` according to its own policy."
#~ msgstr ""

#~ msgid ":py:class:`~typing.Sequence`\\[:py:class:`~aioqzone.event.login.LoginMethod`]"
#~ msgstr ""

#~ msgid "a subset of `._order`."
#~ msgstr ""

#~ msgid ""
#~ "Login manager for QR login. This manager may "
#~ "trigger :meth:`~aioqzone.event.login.LoginEvent.LoginSuccess` and "
#~ ":meth:`~aioqzone.event.login.LoginEvent.LoginFailed` hook."
#~ msgstr ""

#~ msgid "qr polling task is canceled"
#~ msgstr ""

#~ msgid "on exceptions do not break the system, such as timeout, Http errors, etc."
#~ msgstr ""

#~ msgid "on unexpected error raised when polling"
#~ msgstr ""

#~ msgid "raises"
#~ msgstr ""

#~ msgid "`qqqr.exception.HookError`: an error is raised from hook"
#~ msgstr ""

#~ msgid ""
#~ "Login manager for username-password login. This "
#~ "manager may trigger :meth:`~aioqzone.event.login.LoginEvent.LoginSuccess`"
#~ " and :meth:`~aioqzone.event.login.LoginEvent.LoginFailed` hook."
#~ msgstr ""

#~ msgid "login error when up login."
#~ msgstr ""

#~ msgid "if acceptable errors occured, for example, http errors."
#~ msgstr ""

#~ msgid "if unexpected error raised"
#~ msgstr ""

#~ msgid ""
#~ "Internal exception represents the condition that the "
#~ "login method is interrupted and the caller could"
#~ " choose the next login method or just to "
#~ "raise a :exc:`.LoginError`."
#~ msgstr ""
