# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, aioqzone
# This file is distributed under the same license as the aioqzone package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: aioqzone \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-23 21:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../source/aioqzone/api/raw.rst:2
msgid "Qzone API"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI:1 of
msgid "Just a wrapper for Qzone http interface. No type validating."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI:3 of
msgid "rename to ``QzoneRawAPI``"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI._relogin_retry:1 of
msgid "A decorator which will relogin and retry given func if cookie expired."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI._relogin_retry:3 of
msgid "'cookie expired' is indicated by:"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI._relogin_retry:5 of
msgid "`aioqzone.exception.QzoneError` code -3000 or -4002"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI._relogin_retry:6 of
msgid "HTTP response code 403"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI._relogin_retry aioqzone.api.raw.QzoneRawAPI._rtext_handler
#: aioqzone.api.raw.QzoneRawAPI.emotion_delete aioqzone.api.raw.QzoneRawAPI.emotion_getcomments
#: aioqzone.api.raw.QzoneRawAPI.emotion_msgdetail aioqzone.api.raw.QzoneRawAPI.emotion_msglist
#: aioqzone.api.raw.QzoneRawAPI.emotion_publish aioqzone.api.raw.QzoneRawAPI.emotion_re_feeds
#: aioqzone.api.raw.QzoneRawAPI.emotion_update aioqzone.api.raw.QzoneRawAPI.feeds3_html_more
#: aioqzone.api.raw.QzoneRawAPI.floatview_photo_list aioqzone.api.raw.QzoneRawAPI.like_app of
msgid "参数"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI._relogin_retry:10 of
msgid "a callable, which should be rerun after login expired and relogin."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI._relogin_retry:12 of
msgid "Decorate code as less as possible"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI._relogin_retry:15 of
msgid ""
"You *SHOULD* **NOT** wrap a function with mutable input. If you change the mutable var in the "
"first attempt, in the second attempt the var saves the changed value."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI._rtext_handler:1 of
msgid "Handles the response text recieved from Qzone API, returns the parsed json dict."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI._rtext_handler:5 of
msgid "response text"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI._rtext_handler:7 of
msgid "The text is to be parsed by callback_regex, defaults to True."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI._rtext_handler:9 of
msgid "Error # key, defaults to ('code', 'err')."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI._rtext_handler:11 of
msgid "Error message key, defaults to ('msg', 'message')."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI._rtext_handler aioqzone.api.raw.QzoneRawAPI.emotion_delete
#: aioqzone.api.raw.QzoneRawAPI.emotion_getcomments aioqzone.api.raw.QzoneRawAPI.emotion_msgdetail
#: aioqzone.api.raw.QzoneRawAPI.emotion_msglist aioqzone.api.raw.QzoneRawAPI.emotion_publish
#: aioqzone.api.raw.QzoneRawAPI.emotion_re_feeds aioqzone.api.raw.QzoneRawAPI.emotion_update
#: aioqzone.api.raw.QzoneRawAPI.feeds3_html_more aioqzone.api.raw.QzoneRawAPI.floatview_photo_list
#: aioqzone.api.raw.QzoneRawAPI.get_feeds_count aioqzone.api.raw.QzoneRawAPI.like_app of
msgid "抛出"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI._rtext_handler:13 of
msgid "if errno != 0"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI._rtext_handler aioqzone.api.raw.QzoneRawAPI.emotion_delete
#: aioqzone.api.raw.QzoneRawAPI.emotion_getcomments aioqzone.api.raw.QzoneRawAPI.emotion_msgdetail
#: aioqzone.api.raw.QzoneRawAPI.emotion_msglist aioqzone.api.raw.QzoneRawAPI.emotion_publish
#: aioqzone.api.raw.QzoneRawAPI.emotion_re_feeds aioqzone.api.raw.QzoneRawAPI.emotion_update
#: aioqzone.api.raw.QzoneRawAPI.feeds3_html_more aioqzone.api.raw.QzoneRawAPI.floatview_photo_list
#: aioqzone.api.raw.QzoneRawAPI.get_feeds_count aioqzone.api.raw.QzoneRawAPI.like_app of
msgid "返回类型"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI._rtext_handler:15 aioqzone.api.raw.QzoneRawAPI.emotion_getcomments:14
#: aioqzone.api.raw.QzoneRawAPI.emotion_msgdetail:12 aioqzone.api.raw.QzoneRawAPI.emotion_publish:12
#: aioqzone.api.raw.QzoneRawAPI.emotion_update:14 aioqzone.api.raw.QzoneRawAPI.feeds3_html_more:20
#: aioqzone.api.raw.QzoneRawAPI.floatview_photo_list:13 of
msgid ""
":py:class:`~typing.Dict`\\[:py:class:`str`, :py:data:`~typing.Union`\\[:py:class:`bool`, "
":py:class:`int`, :py:class:`str`, "
":py:class:`~typing.Dict`\\[:py:data:`~typing.Union`\\[:py:class:`str`, :py:class:`int`], "
":py:data:`~typing.Union`\\[:py:class:`bool`, :py:class:`int`, :py:class:`str`, "
":py:class:`~typing.Dict`\\[:py:data:`~typing.Union`\\[:py:class:`str`, :py:class:`int`], "
"JsonValue], :py:class:`~typing.List`\\[JsonValue]]], "
":py:class:`~typing.List`\\[:py:data:`~typing.Union`\\[:py:class:`bool`, :py:class:`int`, "
":py:class:`str`, :py:class:`~typing.Dict`\\[:py:data:`~typing.Union`\\[:py:class:`str`, "
":py:class:`int`], JsonValue], :py:class:`~typing.List`\\[JsonValue]]]]]"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI._rtext_handler aioqzone.api.raw.QzoneRawAPI.emotion_delete
#: aioqzone.api.raw.QzoneRawAPI.emotion_getcomments aioqzone.api.raw.QzoneRawAPI.emotion_msgdetail
#: aioqzone.api.raw.QzoneRawAPI.emotion_msglist aioqzone.api.raw.QzoneRawAPI.emotion_publish
#: aioqzone.api.raw.QzoneRawAPI.emotion_re_feeds aioqzone.api.raw.QzoneRawAPI.emotion_update
#: aioqzone.api.raw.QzoneRawAPI.feeds3_html_more aioqzone.api.raw.QzoneRawAPI.floatview_photo_list
#: aioqzone.api.raw.QzoneRawAPI.get_feeds_count aioqzone.api.raw.QzoneRawAPI.like_app of
msgid "返回"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI._rtext_handler:16 of
msgid "json response"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_delete:1 of
msgid "Delete a feed."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_delete:4 of
msgid "feed id, named tid, feedkey, etc."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_delete:6 of
msgid "feed create time. `now` in :meth:`.emotion_publish` result dict."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_delete:8 of
msgid "appid"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_delete:10 aioqzone.api.raw.QzoneRawAPI.emotion_re_feeds:6 of
msgid "typeid"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_delete:12 aioqzone.api.raw.QzoneRawAPI.emotion_re_feeds:8 of
msgid "topic id, got from html"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_delete:14 aioqzone.api.raw.QzoneRawAPI.emotion_update:8 of
msgid "host uin, defaults to None, means current logined user."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_delete:16 aioqzone.api.raw.QzoneRawAPI.emotion_getcomments:10
#: aioqzone.api.raw.QzoneRawAPI.emotion_msgdetail:8 aioqzone.api.raw.QzoneRawAPI.emotion_msglist:10
#: aioqzone.api.raw.QzoneRawAPI.emotion_publish:8 aioqzone.api.raw.QzoneRawAPI.emotion_re_feeds:12
#: aioqzone.api.raw.QzoneRawAPI.emotion_update:10 aioqzone.api.raw.QzoneRawAPI.feeds3_html_more:16
#: aioqzone.api.raw.QzoneRawAPI.floatview_photo_list:8 aioqzone.api.raw.QzoneRawAPI.get_feeds_count:3
#: aioqzone.api.raw.QzoneRawAPI.like_app:8 of
msgid "error http response code"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_delete:17 aioqzone.api.raw.QzoneRawAPI.emotion_getcomments:11
#: aioqzone.api.raw.QzoneRawAPI.emotion_msgdetail:9 aioqzone.api.raw.QzoneRawAPI.emotion_msglist:11
#: aioqzone.api.raw.QzoneRawAPI.emotion_publish:9 aioqzone.api.raw.QzoneRawAPI.emotion_re_feeds:13
#: aioqzone.api.raw.QzoneRawAPI.emotion_update:11 aioqzone.api.raw.QzoneRawAPI.feeds3_html_more:17
#: aioqzone.api.raw.QzoneRawAPI.floatview_photo_list:9 aioqzone.api.raw.QzoneRawAPI.get_feeds_count:4
#: of
msgid "error qzone response code"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_delete aioqzone.api.raw.QzoneRawAPI.emotion_getcomments
#: aioqzone.api.raw.QzoneRawAPI.emotion_msgdetail aioqzone.api.raw.QzoneRawAPI.emotion_msglist
#: aioqzone.api.raw.QzoneRawAPI.emotion_publish aioqzone.api.raw.QzoneRawAPI.emotion_re_feeds
#: aioqzone.api.raw.QzoneRawAPI.emotion_update aioqzone.api.raw.QzoneRawAPI.feeds3_html_more
#: aioqzone.api.raw.QzoneRawAPI.floatview_photo_list aioqzone.api.raw.QzoneRawAPI.get_feeds_count
#: aioqzone.api.raw.QzoneRawAPI.like_app of
msgid "raises"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_delete:18 aioqzone.api.raw.QzoneRawAPI.emotion_getcomments:12
#: aioqzone.api.raw.QzoneRawAPI.emotion_msgdetail:10 aioqzone.api.raw.QzoneRawAPI.emotion_msglist:12
#: aioqzone.api.raw.QzoneRawAPI.emotion_publish:10 aioqzone.api.raw.QzoneRawAPI.emotion_re_feeds:14
#: aioqzone.api.raw.QzoneRawAPI.emotion_update:12 aioqzone.api.raw.QzoneRawAPI.feeds3_html_more:18
#: aioqzone.api.raw.QzoneRawAPI.floatview_photo_list:10 aioqzone.api.raw.QzoneRawAPI.get_feeds_count:5
#: aioqzone.api.raw.QzoneRawAPI.like_app:9 of
msgid ""
"All error that may be raised from :meth:`.login.new_cookie`, which depends on the login manager "
"you passed in."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_delete:20 of
msgid ""
":py:data:`~typing.Optional`\\[:py:class:`~typing.Dict`\\[:py:class:`str`, "
":py:data:`~typing.Union`\\[:py:class:`bool`, :py:class:`int`, :py:class:`str`, "
":py:class:`~typing.Dict`\\[:py:data:`~typing.Union`\\[:py:class:`str`, :py:class:`int`], "
":py:data:`~typing.Union`\\[:py:class:`bool`, :py:class:`int`, :py:class:`str`, "
":py:class:`~typing.Dict`\\[:py:data:`~typing.Union`\\[:py:class:`str`, :py:class:`int`], "
"JsonValue], :py:class:`~typing.List`\\[JsonValue]]], "
":py:class:`~typing.List`\\[:py:data:`~typing.Union`\\[:py:class:`bool`, :py:class:`int`, "
":py:class:`str`, :py:class:`~typing.Dict`\\[:py:data:`~typing.Union`\\[:py:class:`str`, "
":py:class:`int`], JsonValue], :py:class:`~typing.List`\\[JsonValue]]]]]]"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_delete:21 of
msgid "qzone response as is, usually nothing meaningful."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_getcomments:1 of
msgid "Get complete html of a given feed"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_getcomments:4 aioqzone.api.raw.QzoneRawAPI.emotion_msglist:4
#: of
msgid "uin"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_getcomments:6 of
msgid "feed id"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_getcomments:8 of
msgid "feedstype in html"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_getcomments:15 of
msgid "response dict"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_msgdetail:1 of
msgid "Get detail of a given msg."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_msgdetail:4 aioqzone.api.raw.QzoneRawAPI.emotion_re_feeds:10
#: of
msgid "owner uin"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_msgdetail:6 of
msgid "feed id, named fid, tid or feedkey"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_msgdetail:13 of
msgid "a dict represents the feed in detail."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_msgdetail:15 of
msgid "share msg is not support, i.e. `appid=311`"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_msglist:1 of
msgid "Get msg(feed?) list of a user."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_msglist:6 of
msgid "number, defaults to 20"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_msglist:8 of
msgid "start position, defaults to 0"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_msglist:14 of
msgid ""
":py:class:`~typing.List`\\[:py:class:`~typing.Dict`\\[:py:class:`str`, "
":py:data:`~typing.Union`\\[:py:class:`bool`, :py:class:`int`, :py:class:`str`, "
":py:class:`~typing.Dict`\\[:py:data:`~typing.Union`\\[:py:class:`str`, :py:class:`int`], "
":py:data:`~typing.Union`\\[:py:class:`bool`, :py:class:`int`, :py:class:`str`, "
":py:class:`~typing.Dict`\\[:py:data:`~typing.Union`\\[:py:class:`str`, :py:class:`int`], "
"JsonValue], :py:class:`~typing.List`\\[JsonValue]]], "
":py:class:`~typing.List`\\[:py:data:`~typing.Union`\\[:py:class:`bool`, :py:class:`int`, "
":py:class:`str`, :py:class:`~typing.Dict`\\[:py:data:`~typing.Union`\\[:py:class:`str`, "
":py:class:`int`], JsonValue], :py:class:`~typing.List`\\[JsonValue]]]]]]"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_msglist:15 of
msgid "a list of messages"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_publish:1 of
msgid "Publish a feed. appid=311."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_publish:4 of
msgid "text content."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_publish:6 of
msgid "feed access right, defaults to 0 (Not used till now)"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_publish:13 of
msgid "qzone response as is, containing feed html and fid."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_publish:16 aioqzone.api.raw.QzoneRawAPI.emotion_update:18 of
msgid "This api is under development. It has basic functions only."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_re_feeds:1 of
msgid "Reply (comment) a feed. Rich types are not supported now."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_re_feeds:4 of
msgid "the comment string."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_re_feeds:16 of
msgid ":py:class:`str`"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_re_feeds:17 of
msgid "new feed html"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_re_feeds:21 of
msgid "`.emotion_getcomments`"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_update:1 of
msgid "Update the content of a feed."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_update:4 of
msgid "feed id, named feedkey, tid, etc."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_update:6 of
msgid "new content in text."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.emotion_update:15 of
msgid "qzone response as is."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.feeds3_html_more:1 of
msgid ""
"return a dict with ``main`` and ``data`` field. ``main`` field contains some auxiliary "
"information, while data is a list of dict, each dict represents one feed."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.feeds3_html_more:6 of
msgid "#page >= 0"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.feeds3_html_more:8 of
msgid "feed count, max as 10, defaults to 10."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.feeds3_html_more:10 of
msgid "`!main.externparam` field in last response"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.feeds3_html_more:12 of
msgid "`!main.daylist` field in last response"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.feeds3_html_more:14 of
msgid "`!main.uinlist` field in last response"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.feeds3_html_more:21 of
msgid "feed attributes and html feed"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.feeds3_html_more:25 of
msgid "let `count` <= 10; Use external string directly and remove `FeedsMoreTransaction`."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.floatview_photo_list:1 of
msgid "Get detail of an album, including raw image url."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.floatview_photo_list:4 of
msgid "Necessary album data"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.floatview_photo_list:6 of
msgid "pic num"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.floatview_photo_list:11 of
msgid "maybe data is corruptted"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.floatview_photo_list:14 of
msgid "album details"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.floatview_photo_list:17 of
msgid ""
"This api is a 'slow' api, means it always returns an error code, requesting a retry a moment "
"later. Use :meth:`.emotion_msgdetail` to get raw photo/video in a feed."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.get_feeds_count:1 of
msgid "Get feeds update count (new feeds, new photos, new comments, etc)"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.get_feeds_count:7 of
msgid ""
":py:class:`~typing.Dict`\\[:py:class:`str`, :py:data:`~typing.Union`\\[:py:class:`int`, "
":py:class:`list`]]"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.get_feeds_count:8 of
msgid "update counts"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.get_feeds_count:11 of
msgid ""
"This api is also the 'keep-alive' signal to avoid cookie from expiring. Call this api every 300s"
" can help keep cookie alive."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.like_app:1 of
msgid "Like or unlike a feed."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.like_app:4 of
msgid "Necessary data for like/unlike"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.like_app:6 of
msgid "True as like, False as unlike, defaults to True."
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.like_app:11 of
msgid ":py:class:`bool`"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.like_app:12 of
msgid "success flag"
msgstr ""

#: aioqzone.api.raw.QzoneRawAPI.like_app:14 of
msgid "not a @noexcept method."
msgstr ""

#~ msgid "Parameters"
#~ msgstr ""

#~ msgid "Raises"
#~ msgstr ""

#~ msgid "Return type"
#~ msgstr ""

#~ msgid "Returns"
#~ msgstr ""

#~ msgid "qr login canceled"
#~ msgstr ""

#~ msgid "not logined"
#~ msgstr ""

#~ msgid "unexcpected error"
#~ msgstr ""

#~ msgid ""
#~ ":py:data:`~typing.Optional`\\[:py:class:`~typing.Dict`\\[:py:class:`str`, "
#~ ":py:data:`~typing.Union`\\[:py:class:`bool`, :py:class:`int`, :py:class:`str`,"
#~ " :py:class:`~typing.Dict`\\[:py:data:`~typing.Union`\\[:py:class:`str`, "
#~ ":py:class:`int`], :py:data:`~typing.Union`\\[:py:class:`bool`, :py:class:`int`,"
#~ " :py:class:`str`, "
#~ ":py:class:`~typing.Dict`\\[:py:data:`~typing.Union`\\[:py:class:`str`, "
#~ ":py:class:`int`], :py:class:`~typing.ForwardRef`], "
#~ ":py:class:`~typing.List`\\[:py:class:`~typing.ForwardRef`]]], "
#~ ":py:class:`~typing.List`\\[:py:data:`~typing.Union`\\[:py:class:`bool`, "
#~ ":py:class:`int`, :py:class:`str`, "
#~ ":py:class:`~typing.Dict`\\[:py:data:`~typing.Union`\\[:py:class:`str`, "
#~ ":py:class:`int`], :py:class:`~typing.ForwardRef`], "
#~ ":py:class:`~typing.List`\\[:py:class:`~typing.ForwardRef`]]]]]]"
#~ msgstr ""

#~ msgid ""
#~ ":py:class:`~typing.Dict`\\[:py:class:`str`, "
#~ ":py:data:`~typing.Union`\\[:py:class:`bool`, :py:class:`int`, :py:class:`str`,"
#~ " :py:class:`~typing.Dict`\\[:py:data:`~typing.Union`\\[:py:class:`str`, "
#~ ":py:class:`int`], :py:data:`~typing.Union`\\[:py:class:`bool`, :py:class:`int`,"
#~ " :py:class:`str`, "
#~ ":py:class:`~typing.Dict`\\[:py:data:`~typing.Union`\\[:py:class:`str`, "
#~ ":py:class:`int`], :py:class:`~typing.ForwardRef`], "
#~ ":py:class:`~typing.List`\\[:py:class:`~typing.ForwardRef`]]], "
#~ ":py:class:`~typing.List`\\[:py:data:`~typing.Union`\\[:py:class:`bool`, "
#~ ":py:class:`int`, :py:class:`str`, "
#~ ":py:class:`~typing.Dict`\\[:py:data:`~typing.Union`\\[:py:class:`str`, "
#~ ":py:class:`int`], :py:class:`~typing.ForwardRef`], "
#~ ":py:class:`~typing.List`\\[:py:class:`~typing.ForwardRef`]]]]]"
#~ msgstr ""

#~ msgid "a dict reps the feed in detail"
#~ msgstr ""

#~ msgid ""
#~ ":py:class:`~typing.List`\\[:py:class:`~typing.Dict`\\[:py:class:`str`, "
#~ ":py:data:`~typing.Union`\\[:py:class:`bool`, :py:class:`int`, :py:class:`str`,"
#~ " :py:class:`~typing.Dict`\\[:py:data:`~typing.Union`\\[:py:class:`str`, "
#~ ":py:class:`int`], :py:data:`~typing.Union`\\[:py:class:`bool`, :py:class:`int`,"
#~ " :py:class:`str`, "
#~ ":py:class:`~typing.Dict`\\[:py:data:`~typing.Union`\\[:py:class:`str`, "
#~ ":py:class:`int`], :py:class:`~typing.ForwardRef`], "
#~ ":py:class:`~typing.List`\\[:py:class:`~typing.ForwardRef`]]], "
#~ ":py:class:`~typing.List`\\[:py:data:`~typing.Union`\\[:py:class:`bool`, "
#~ ":py:class:`int`, :py:class:`str`, "
#~ ":py:class:`~typing.Dict`\\[:py:data:`~typing.Union`\\[:py:class:`str`, "
#~ ":py:class:`int`], :py:class:`~typing.ForwardRef`], "
#~ ":py:class:`~typing.List`\\[:py:class:`~typing.ForwardRef`]]]]]]"
#~ msgstr ""

#~ msgid "Update content of a feed."
#~ msgstr ""
